use ast;

use ast::tokens::{Tok, TokErr};

grammar<'input>(text: &'input str);

pub Module: ast::Module = {
    <b:Block> <s:Scene*> => ast::Module {
        globals: b,
        scenes: s,
    },
};

Scene: ast::Scene = {
    "==" <name:"NmScene"> <args:ArgList?> ";" <body:Block> => ast::Scene {
        name: ast::SceneName {
            name: name.to_string(),
            in_module: None,
        },
        args: args.unwrap_or(vec![]),
        body: body,
    },
};

Block: ast::Block = {
    <Statement*> => ast::Block(<>),
};

Statement: ast::Stmt = {
    ";" => ast::Stmt::Empty,

    "disarm" <Label> ";" => {
        ast::Stmt::Disarm {
            target: <>,
        }
    },

    "weave" <name:Label?> ";" <arms:WeaveArm*> ";;" ";" => {
        ast::Stmt::Weave {
            name: name.unwrap_or_default(),
            arms: arms,
        }
    },

    "trap" <name:Label?> ";" <arms:TrapArm*> ";;" ";" => {
        ast::Stmt::Trap {
            name: name.unwrap_or_default(),
            arms: arms,
        }
    },

    "listen" <name:Label?> ";" <arms:TrapArm*> ";;" ";" => {
        ast::Stmt::Listen {
            name: name.unwrap_or_default(),
            arms: arms,
        }
    },

    "trace" <Expr> ";" => {
        ast::Stmt::Trace {
            value: <>,
        }
    },

    "let" <name:IdAssign> "=" <value:Expr> ";" => match name {
        Some(id) => ast::Stmt::Let {
            name: id,
            value: value,
        },

        None => ast::Stmt::Discard {
            value: value,
        },
    },

    "wait" <Expr> ";" => {
        ast::Stmt::Wait {
            value: <>,
        }
    },

    <Str> ";" => {
        ast::Stmt::Naked {
            target: ast::Expr::PidZero,
            message: <>,
        }
    },

    <name:IdExpr> <message:Str> ";" => {
        ast::Stmt::Naked {
            target: name,
            message: message,
        }
    },

    <target:IdExpr> "<-" <message:Message> ";" => {
        ast::Stmt::SendMsg {
            target: target,
            message: message,
        }
    },

    "->" <Call> ";" => {
        ast::Stmt::Recur {
            target: <>,
        }
    },

    "spawn" <Call> ";" => {
        ast::Stmt::Discard {
            value: ast::Expr::Spawn(<>),
        }
    },
};

WeaveArm: ast::WeaveArm = {
    "|" <guard:WeaveGuard> <message:Str> ";" <body:Block> => {
        ast::WeaveArm {
            guard: guard,
            message: ast::Expr::Str(message),
            body: body,
        }
    },

    "|" "_" ";" <body:Block> => {
        ast::WeaveArm {
            guard: ast::Cond::LastResort,
            message: ast::Expr::Str(ast::Str::Plain("".to_owned())),
            body: body,
        }
    },

    // TODO: Handle more complicated choice formats
};

#[inline]
WeaveGuard: ast::Cond = {
    <guard:("if" <Cond> "then")?> => {
        guard.unwrap_or(ast::Cond::True)
    }
};

TrapArm: ast::TrapArm = {
    "|" <p:Comma<Pat>> <o:TrapSender> <g:TrapGuard> ";" <body:Block> => {
        ast::TrapArm {
            pattern: ast::Pat::List(p),
            origin: o,
            guard: g,
            body: body,
        }
    },
};

#[inline]
TrapSender: ast::Pat = {
    <sender:("from" <Pat>)?> => {
        sender.unwrap_or_default()
    }
};

#[inline]
TrapGuard: ast::Cond = {
    <guard:("when" <Cond>)?> => {
        guard.unwrap_or(ast::Cond::True)
    }
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    },
};

ArgList: Vec<Option<ast::Ident>> = {
    "(" <args:(Comma<IdAssign>)?> ")" => args.unwrap_or(vec![]),
};

Call: ast::Call = {
    <name:SceneName> <args:("(" <(Comma<Expr>)?> ")")?> => {
        ast::Call(name, args.unwrap_or(None).unwrap_or(vec![]))
    },
};

SceneName: ast::SceneName = {
    <path:Modpath?> <name:"NmScene"> => {
        ast::SceneName {
            name: name.to_string(),
            in_module: path,
        }
    },
};

Label: ast::Label = {
    <name:"NmLabel"> => ast::Label::Local {
        name: name.chars().skip(1).collect::<String>()
    },
};

IdExpr: ast::Expr = {
    <name:"NmVar"> => match name {
        "Self" => ast::Expr::PidOfSelf,

        id => ast::Expr::Id(ast::Ident { name: id.to_owned(), }),
    }
};

IdAssign: Option<ast::Ident> = {
    "_" => None,

    <name:"NmVar"> => match name {
        //"Self" => panic!("Can't assign to self"),
        // Just allow it for now, and check it using an AST visit pass

        name => Some(ast::Ident { name: name.to_string() }),
    },
};

#[inline]
Modpath: ast::Modpath = {
    <segments:(<"NmScene"> ":")+> => {
        ast::Modpath({
            segments.into_iter()
                .map(|s| s.to_owned())
                .collect()
        })
    },
};

Pat: ast::Pat = {
    "_" => ast::Pat::Hole,

    <id:"NmVar"> => match id {
        "Self" => ast::Pat::Match(ast::Expr::PidOfSelf),

        name => ast::Pat::Assign(ast::Ident { name: name.to_owned() }),
    },

    <Literal> => ast::Pat::Match(<>),

    "[" <contents:(Comma<Pat>)?> "]" => {
        ast::Pat::List(contents.unwrap_or(vec![]))
    },
};

Cond: ast::Cond = {
    // FIXME: More operators
    <Expr> "==" <Expr> => ast::Cond::Compare(ast::BoolOp::Eql, <>),
};

Message: ast::Expr = {
    <Comma<Expr>> => ast::Expr::List(<>),
};

Expr: ast::Expr = {
    // FIXME: More operators
    <e:Expr2> => e,
};

Binop<O, L, R>: ast::Expr = {
    <lhs:L> <op:O> <rhs:R> => {
        ast::Expr::Op(op, vec![lhs, rhs])
    },
};

Op2: ast::Op = {
    "+" => ast::Op::Add,
    "-" => ast::Op::Sub,
};

Expr2: ast::Expr = {
    <b:Binop<Op2, Expr2, Expr1>> => b,
    <e:Expr1> => e,
};

Op1: ast::Op = {
    "/" => ast::Op::Div,
    "*" => ast::Op::Mul,
};

Expr1: ast::Expr = {
    <b:Binop<Op1, Expr1, Expr0>> => b,
    <e:Expr0> => e,
};

Expr0: ast::Expr = {
    <IdExpr> => <>,

    <Literal> => <>,

    // TODO: String

    "(" <e:Expr> ")" => e,

    "spawn" <Call> => ast::Expr::Spawn(<>),

    "[" <elems:(Comma<Expr>)?> "]" => {
        ast::Expr::List(elems.unwrap_or(vec![]))
    },
};

Literal: ast::Expr = {
    <a:"LitAtom"> => ast::Expr::Atom(ast::Atom::User({
        a.chars().skip(1).collect::<String>()
    })),

    <n:"LitInt"> => ast::Expr::Int({
        n.parse::<i32>().expect("Can't parse int")
    }),
};

Str: ast::Str = {
    <s:"LitStr"> => ast::Str::Plain({
        s.chars().skip(2).collect::<String>()
    }),

    // TODO: Markup and interpolation
};

extern {
    type Location = usize;
    type Error = TokErr;

    enum Tok<'input> {
        ";" => Tok::EndLn,
        ";;" => Tok::EndBlk,

        "disarm" => Tok::KwDisarm,
        "from" => Tok::KwFrom,
        "given" => Tok::KwGiven,
        "if" => Tok::KwIf,
        "let" => Tok::KwLet,
        "listen" => Tok::KwListen,
        "spawn" => Tok::KwSpawn,
        "then" => Tok::KwThen,
        "trace" => Tok::KwTrace,
        "trap" => Tok::KwTrap,
        "wait" => Tok::KwWait,
        "weave" => Tok::KwWeave,
        "when" => Tok::KwWhen,

        "NmScene" => Tok::NmScene(<&'input str>),
        "NmLabel" => Tok::NmLabel(<&'input str>),
        "NmMacro" => Tok::NmMacro(<&'input str>),
        "NmVar" => Tok::NmVar(<&'input str>),

        "LitAtom" => Tok::LitAtom(<&'input str>),
        "LitInt" => Tok::LitInt(<&'input str>),
        "LitRoll" => Tok::LitRoll(<&'input str>),
        "LitStr" => Tok::LitStr(<&'input str>),

        "=" => Tok::OpAssign,
        "," => Tok::OpComma,
        "." => Tok::OpDot,
        "<-" => Tok::OpSend,
        ":" => Tok::OpColon,

        "*" => Tok::OpMul,
        "/" => Tok::OpDiv,
        "+" => Tok::OpAdd,
        "-" => Tok::OpSub,

        "|" => Tok::Pipe,
        "_" => Tok::Hole,
        "==" => Tok::Scene,
        "->" => Tok::Divert,

        "(" => Tok::LParen,
        ")" => Tok::RParen,
        "[" => Tok::LSquare,
        "]" => Tok::RSquare,
        "{" => Tok::LCurly,
        "}" => Tok::RCurly,
        "<" => Tok::LAngle,
        ">" => Tok::RAngle,
    }
}

// vim: ft=rust
